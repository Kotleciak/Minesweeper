@inject IJSRuntime JS
@if(selectedDifficulty == Difficulty.NotSelected)
{
	<h1 id="KotleciakHeadline">Kotleciak's Minesweeper</h1>
}
@switch (selectedDifficulty)
{
	case Difficulty.NotSelected:
		<div id="SelectDifficultyContainer">
			<h3 id="SelectDifficultyTitle">Select difficulty</h3>
			<button @onclick="() => StartGame(Difficulty.Easy)" class="SelectDifficultyBtn">easy</button>
			<button @onclick="() => StartGame(Difficulty.Medium)" class="SelectDifficultyBtn">medium</button>
			<button @onclick="() => StartGame(Difficulty.Hard)" class="SelectDifficultyBtn">hard</button>
		</div>
		break;
	case Difficulty.Easy:
		<div class="GameBoard">
			<!--11 columns and 11 rows-->
			@for (int k = 11; k > 0; k--)
			{
				<div class="row GridRow" style="height: 6.63%;">
					@for (int i = 1; i < 12; i++)
					{
						int x = k;
						int y = i;
						if((k + i) % 2 == 0)
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color: darkolivegreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
						else
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color:forestgreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
					}
				</div>
			}
		</div>
		break;
	case Difficulty.Medium:
		<div class="GameBoard">
			<!--12 columns 12-->
			@for (int k = 12; k > 0; k--)
			{
				<div class="row GridRow" style="height: 5.83%;">
					@for (int i = 1; i < 13; i++)
					{
						int x = k;
						int y = i;
						if ((k + i) % 2 == 0)
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color: darkolivegreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
						else
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color:forestgreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
					}
				</div>
			}
		</div>
		break;
	case Difficulty.Hard:
		<div class="GameBoard">
			<!--14 clumns 14 rows-->
			@for (int k = 14; k > 0; k--)
			{
				<div class="row GridRow" style="height: 5%;">
					@for (int i = 1; i < 15; i++)
					{
						int x = k;
						int y = i;
						if ((k + i) % 2 == 0)
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color: darkolivegreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
						else
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color:forestgreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
					}
				</div>
			}
		</div>
		break;
}
<audio id="sound" style="display: none" src="/explosion_effect.mp3" />
@if(selectedDifficulty != Difficulty.NotSelected)
{
	<div id="GameInfo">
		<img src="/LeftClickMinesweeper.png" class="MouseImage"/>
		<span class="MouseText">To reveal field</span>
		<img src="/RightClickMinesweeper.png" class="MouseImage" />
		<span class="MouseText">To set a flag</span>
	</div>
	<a id="HelpButton" href="https://www.youtube.com/watch?v=dvvrOeITzG8" title="Random Minesweeper tutorial found on youtube" target="_blank">?</a>
}

<script>
	window.setAsFlagged = function(ID) {
		event.preventDefault(); // Prevent the default context menu from appearing
		if(document.getElementById(ID).hasChildNodes())
		{
			document.getElementById(ID).innerHTML = "";
		}
		else
		{
			let image = document.createElement("img");
			image.src = "/Flag.png";
			image.style.width = "30px"; // Set the width of the flag image
			image.style.height = "30px"; // Set the height of the flag image
			document.getElementById(ID).appendChild(image);
		}
		let sound = document.getElementById("sound");
		sound.src = "/flag_planting_sound.mp3"
		sound.play();
	}
	window.GameLost = function(id, mines) {
		let sound = document.getElementById("sound");
		let item = document.getElementById(id);

		mines.forEach(x => {
			let mineItem = document.getElementById(x.id);
			if(mineItem && mineItem.hasChildNodes() == false)
			{
				let mineImage = document.createElement("img");
				mineImage.src = "/Bomb.png";
				mineImage.style.width = "30px";
				mineImage.style.height = "30px";
				mineItem.appendChild(mineImage);
			}
		});

		sound.src = "/explosion_effect.mp3"
		sound.play();
		setTimeout(function() {
			alert("You lost the game!");
		}, 500);
	}
	window.revealFields = function(list) {
	console.log("Otrzymano listę:", list);
	list.forEach(x => {
	console.log("Sprawdzam ID:", x.id);
	let item = document.getElementById(x.id);
	let number = document.createElement("p");
	if (item) {
	let i = item.id;
	let parts = i.split("-");
	let xIndex = parseInt(parts[0]);
	let yIndex = parseInt(parts[1]);
	item.style.backgroundColor = "gray";
	if((xIndex + yIndex) % 2 == 0)
	{
	item.style.backgroundColor = "#808080";
	}
	else
	{
	item.style.backgroundColor = "#9e9e9e";
	}
	number.innerText = x.adjacentMines
	number.classList.add("AdjectedMinesText");
	switch (x.adjacentMines)
	{
	case 1:
	number.style.color = "blue";
	break;
	case 2:
	number.style.color = "green";
	break;
	case 3:
	number.style.color = "red";
	break;
	case 4:
	number.style.color = "purple";
	break;
	case 5:
	number.style.color = "yellow";
	break;
	case 6:
	number.style.color = "orange";
	break;
	default:
	number.style.color = "black";
	break;
	}
	if(x.adjacentMines > 0 && item.hasChildNodes() == false)
	{
	item.appendChild(number);
	}
	} else {
	console.warn("Nie znaleziono elementu o ID:", x.id);
	}
	});
	};
	window.GameWon = function() 
	{
		let sound = document.getElementById("sound");
		sound.src = "/victory_sound.mp3"
		sound.play();
		setTimeout(function() {
			alert("Congratulations! You won the game!");
		}, 300);
	}
</script>


@code {
	enum Difficulty
	{
		NotSelected,
		Easy,
		Medium,
		Hard
	}
	List<Field> fields = new List<Field>();
	List<Field> bombFields = new List<Field>();
	List<Field> fieldsToShowUp = new List<Field>();
	private int minesCount = 0;
	private Difficulty selectedDifficulty = Difficulty.NotSelected;
	private bool GameStarted = false;
	private async Task StartGame(Difficulty difficulty)
	{
		selectedDifficulty = difficulty;
		fields.Clear();
		bombFields.Clear();
		GameStarted = false;

		switch (difficulty)
		{
			case Difficulty.Easy:
				fields = Enumerable.Range(1, 11).SelectMany(k => Enumerable.Range(1, 11).Select(i => 
					new Field {ID = k + "-" + i, Xindex = k, Yindex = i, IsMine = false, State = Field.FieldState.Hidden }))
				.ToList();
				break;
			case Difficulty.Medium:
				fields = Enumerable.Range(1, 12).SelectMany(k => Enumerable.Range(1, 12).Select(i => 
					new Field { ID = k + "-" + i, Xindex = k, Yindex = i, IsMine = false, State = Field.FieldState.Hidden }))
				.ToList();
				break;
			case Difficulty.Hard:
				fields = Enumerable.Range(1, 14).SelectMany(k => Enumerable.Range(1, 14).Select(i => 
					new Field { ID = k + "-" + i, Xindex = k, Yindex = i, IsMine = false, State = Field.FieldState.Hidden }))
				.ToList();
				break;
			default:
				break;
		}

		StateHasChanged();
		await Task.Yield();

		CreateBombs(difficulty, fields);

		FindMinesInAdjacentFields();
		GameStarted = true; 
	}
	private void CreateBombs(Difficulty difficulty, List<Field> filds)
	{
		int bombCount = 0;
		int maxIndex = 0;
		switch (difficulty)
		{
			case Difficulty.Easy:
				bombCount = 15;
				maxIndex = 12; // 11 columns and 11 rows
				break;
			case Difficulty.Medium:
				bombCount = 20;
				maxIndex = 13; // 12 columns and 12 rows
				break;
			case Difficulty.Hard:
				bombCount = 30;
				maxIndex = 15; // 14 columns and 14 rows
				break;
		}
		minesCount = bombCount; // Store the mine count for later use
		var random = new Random();
		while (bombFields.Count < bombCount)
		{
			int index1 = random.Next(1, maxIndex);
			int index2 = random.Next(1, maxIndex);
			if (!bombFields.Any(x => x.ID == index1 + "-" + index2))
			{
				bombFields.Add(new Field{ ID = index1 + "-" + index2, IsMine = true, Xindex = index1, Yindex = index2});
				fields.FirstOrDefault(x => x.ID == index1 + "-" + index2).IsMine = true; // set the mine in the main fields list
			}
		}
	}
	private void FindMinesInAdjacentFields()
	{
		int count = 0;
		foreach(var i in fields)
		{
			if (i.IsMine)
			{
				continue;
			}
			if (fields.Any(x => x.Xindex == i.Xindex - 1 && x.Yindex == i.Yindex - 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex && x.Yindex == i.Yindex - 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex + 1 && x.Yindex == i.Yindex - 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex + 1 && x.Yindex == i.Yindex && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex - 1 && x.Yindex == i.Yindex + 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex && x.Yindex == i.Yindex + 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex + 1 && x.Yindex == i.Yindex + 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex - 1 && x.Yindex == i.Yindex && x.IsMine)) { count++; }

			i.AdjacentMines = count;
			Console.WriteLine($"Field {i.ID} has {i.AdjacentMines} adjacent mines.");
			count = 0; // reset count for next field
		}
	}
	private async Task ButtonClicked(string id)
	{
		if(GameStarted)
		{
			var clickedField = fields.FirstOrDefault(x => x.ID == id);
			if (clickedField.State == Field.FieldState.Hidden && clickedField.AdjacentMines > 0 && !clickedField.IsMine)
			{
				fieldsToShowUp.Add(clickedField);
				await RevealFields();
			}
			else if (clickedField.State == Field.FieldState.Hidden && clickedField.IsMine)
			{
				GameStarted = false;
				await GameLost(id);
			}
			else if (clickedField.State == Field.FieldState.Hidden && clickedField.AdjacentMines == 0 && !clickedField.IsMine)
			{
				fieldsToShowUp.Add(clickedField);
				await GetFieldsToReveal(clickedField.ID);
				await RevealFields();
			}
			else if (clickedField.State == Field.FieldState.Revealed && clickedField.AdjacentMines > 0)
			{
				if (FindeNearbyMines(clickedField) == clickedField.AdjacentMines)
				{
					bool loose = false;
					GetNeighbourFieldsToShowUp(clickedField);
					foreach (var x in fieldsToShowUp)
					{
						if (x.IsMine)
						{
							loose = true;
						}
					}
					if (loose)
					{
						await GameLost(id);
					}
					else
					{
						await RevealFields();
					}
				}
			}
		}
	}
	private async Task GetFieldsToReveal(string id)
	{
		Field clickedField = fields.FirstOrDefault(x => x.ID == id);
		if (clickedField == null)
		{
			Console.WriteLine("clickedField is null! Invalid ID?");
			return;
		}

		var directions = new (int dx, int dy)[]
		{
		(1, 0),   // right
        (-1, 0),  // left
        (0, 1),   // up
        (0, -1),  // down
		(-1, -1), // up-left
		(-1, 1),  // down-left
		(1, -1),  // up-right
		(1, 1)    // down-right)
		};

		foreach (var (dx, dy) in directions)
		{
			var neighbor = fields.FirstOrDefault(x =>
				x.Xindex == clickedField.Xindex + dx &&
				x.Yindex == clickedField.Yindex + dy
			);

			if (neighbor == null)
				continue;

			if (neighbor != null && !fieldsToShowUp.Contains(neighbor) && !neighbor.IsMine && neighbor.State == Field.FieldState.Hidden)
			{
				fieldsToShowUp.Add(neighbor);

				if (neighbor.AdjacentMines < 1)
				{
					await GetFieldsToReveal(neighbor.ID);
				}
			}
		}
	}

	private async Task RevealFields()
	{
		StateHasChanged();
		await Task.Yield(); // Ensure the UI updates before invoking JS
		await JS.InvokeVoidAsync("revealFields", fieldsToShowUp);
		foreach (var field in fieldsToShowUp)
		{
			fields.FirstOrDefault(x => x.ID == field.ID).State = Field.FieldState.Revealed;
		}
		fieldsToShowUp.Clear();
		await CheckIfWon();
	}
	private async Task SetAFlag(string id)
	{
		var clicked = fields.FirstOrDefault(x => x.ID == id);
		if (clicked.State == Field.FieldState.Flagged)
		{
			fields.FirstOrDefault(x => x.ID == id).State = Field.FieldState.Hidden;
			await JS.InvokeVoidAsync("setAsFlagged", clicked.ID);
		}
		else if(clicked.State == Field.FieldState.Hidden)
		{
			await JS.InvokeVoidAsync("setAsFlagged", clicked.ID);
			fields.FirstOrDefault(x => x.ID == id).State = Field.FieldState.Flagged;
		}
		await CheckIfWon();
	}
	private async Task GameLost(string id)
	{
		List<Field> minesToReveal = bombFields.Where(x => x.State == Field.FieldState.Hidden).ToList();
		await JS.InvokeVoidAsync("GameLost", id, minesToReveal);
		await Task.Delay(500);
		selectedDifficulty = Difficulty.NotSelected;
		fields.Clear();
		bombFields.Clear();
		fieldsToShowUp.Clear();
	}
	private void GetNeighbourFieldsToShowUp(Field clickField)
	{
		var directions = new (int dx, int dy)[]
		{
		(1, 0),   // right
        (-1, 0),  // left
        (0, 1),   // up
        (0, -1),  // down
		(-1, -1), // up-left
		(-1, 1),  // down-left
		(1, -1),  // up-right
		(1, 1)    // down-right)
		};
		foreach (var (dx, dy) in directions)
		{
			var neighbour = fields.FirstOrDefault(x =>
				x.Xindex == clickField.Xindex + dx &&
				x.Yindex == clickField.Yindex + dy
			);
			if(neighbour == null)
			{
				continue;
			}
			if(neighbour.State == Field.FieldState.Hidden)
			{
				fieldsToShowUp.Add(neighbour);
				if (neighbour.AdjacentMines < 1 && !neighbour.IsMine)
				{
					fieldsToShowUp.Add(neighbour);
					GetFieldsToReveal(neighbour.ID);
				}
			}
		}
	}
	private int FindeNearbyMines(Field clickedField)
	{
		int nearbyMinesCount = 0;
		var directions = new (int dx, int dy)[]
		{
		(1, 0),   // right
        (-1, 0),  // left
        (0, 1),   // up
        (0, -1),  // down
		(-1, -1), // up-left
		(-1, 1),  // down-left
		(1, -1),  // up-right
		(1, 1)    // down-right)
		};
		foreach (var (dx, dy) in directions)
		{
			var neighbour = fields.FirstOrDefault(x =>
				x.Xindex == clickedField.Xindex + dx &&
				x.Yindex == clickedField.Yindex + dy
			);
			if (neighbour != null && neighbour.State == Field.FieldState.Flagged)
			{
				nearbyMinesCount++;
			}
		}
		return nearbyMinesCount;
	}
	private async Task CheckIfWon()
	{
		if(fields.Where(x => x.State == Field.FieldState.Hidden).Count() == 0 && 
		fields.Where(x => x.State == Field.FieldState.Flagged).Count() == fields.Where(x => x.IsMine == true).Count() &&
		minesCount == fields.Where(x => x.IsMine == true).Count())
		{
			GameStarted = false;
			await JS.InvokeVoidAsync("GameWon");
			selectedDifficulty = Difficulty.NotSelected;
		}
	}
}
