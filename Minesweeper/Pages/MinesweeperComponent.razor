@inject IJSRuntime JS
<h3>MinesweeperComponent</h3>
@switch (selectedDifficulty)
{
	case Difficulty.NotSelected:
		<div>
			<h3>Select difficulty</h3>
			<button @onclick="() => StartGame(Difficulty.Easy)">easy</button>
			<button @onclick="() => StartGame(Difficulty.Medium)">medium</button>
			<button @onclick="() => StartGame(Difficulty.Hard)">hard</button>
		</div>
		break;
	case Difficulty.Easy:
		<div class="GameBoard">
			<!--11 columns and 11 rows-->
			@for (int k = 11; k > 0; k--)
			{
				<div class="row GridRow" style="height: 6.63%;">
					@for (int i = 1; i < 12; i++)
					{
						int x = k;
						int y = i;
						if((k + i) % 2 == 0)
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color: darkolivegreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
						else
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color:forestgreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
					}
				</div>
			}
		</div>
		break;
	case Difficulty.Medium:
		<div class="GameBoard">
			<!--12 columns 12-->
			@for (int k = 13; k > 0; k--)
			{
				<div class="row GridRow" style="height: 5.83%;">
					@for (int i = 1; i < 13; i++)
					{
						int x = k;
						int y = i;
						if ((k + i) % 2 == 0)
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color: darkolivegreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
						else
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color:forestgreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
					}
				</div>
			}
		</div>
		break;
	case Difficulty.Hard:
		<div class="GameBoard">
			<!--14 clumns 14 rows-->
			@for (int k = 14; k > 0; k--)
			{
				<div class="row GridRow" style="height: 5%;">
					@for (int i = 1; i < 15; i++)
					{
						int x = k;
						int y = i;
						if ((k + i) % 2 == 0)
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color: darkolivegreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
						else
						{
							<div class="col GridColumn">
								<button class="FieldButton" id="@i-@k" style="background-color:forestgreen" @onclick='() => ButtonClicked(y + "-" + x)' @oncontextmenu='() => SetAFlag(y + "-" + x)'></button>
							</div>
						}
					}
				</div>
			}
		</div>
		break;
}
<script>
	window.setAsFlagged = function(ID) {
		event.preventDefault(); // Prevent the default context menu from appearing
		if(document.getElementById(ID).hasChildNodes())
		{
			document.getElementById(ID).innerHTML = "";
		}
		else
		{
			let image = document.createElement("img");
			image.src = "/Flag.png";
			image.style.width = "30px"; // Set the width of the flag image
			image.style.height = "30px"; // Set the height of the flag image
			document.getElementById(ID).appendChild(image);
		}
	}
	window.GameLost = function() {
		alert("You lost the game!");
	}
</script>


@code {
	enum Difficulty
	{
		NotSelected,
		Easy,
		Medium,
		Hard
	}
	List<Field> fields = new List<Field>();
	List<Field> bombFields = new List<Field>();
	List<Field> fieldsToShowUp = new List<Field>();
	private Difficulty selectedDifficulty = Difficulty.NotSelected;
	private async Task StartGame(Difficulty difficulty)
	{
		selectedDifficulty = difficulty;
		fields.Clear();

		switch (difficulty)
		{
			case Difficulty.Easy:
				fields = Enumerable.Range(1, 11).SelectMany(k => Enumerable.Range(1, 11).Select(i => 
					new Field {ID = k + "-" + i, Xindex = k, Yindex = i, IsMine = false, State = Field.FieldState.Hidden }))
				.ToList();
				CreateBombs(difficulty, fields);
				break;
			case Difficulty.Medium:
				fields = Enumerable.Range(1, 12).SelectMany(k => Enumerable.Range(1, 12).Select(i => 
					new Field { ID = k + "-" + i, Xindex = k, Yindex = i, IsMine = false, State = Field.FieldState.Hidden }))
				.ToList();
				CreateBombs(difficulty, fields);
				break;
			case Difficulty.Hard:
				fields = Enumerable.Range(1, 14).SelectMany(k => Enumerable.Range(1, 14).Select(i => 
					new Field { ID = k + "-" + i, Xindex = k, Yindex = i, IsMine = false, State = Field.FieldState.Hidden }))
				.ToList();
				CreateBombs(difficulty, fields);
				break;
			default:
				break;
		}
		FindMinesInAdjacentFields();

	}
	private void CreateBombs(Difficulty difficulty, List<Field> filds)
	{
		int bombCount = 0;
		int maxIndex = 0;
		switch (difficulty)
		{
			case Difficulty.Easy:
				bombCount = 15;
				maxIndex = 12; // 11 columns and 11 rows
				break;
			case Difficulty.Medium:
				bombCount = 20;
				maxIndex = 13; // 12 columns and 12 rows
				break;
			case Difficulty.Hard:
				bombCount = 30;
				maxIndex = 15; // 14 columns and 14 rows
				break;
		}
		var random = new Random();
		while (bombFields.Count < bombCount)
		{
			int index1 = random.Next(1, maxIndex);
			int index2 = random.Next(1, maxIndex);
			if (!bombFields.Any(x => x.ID == index1 + "-" + index2))
			{
				bombFields.Add(new Field{ ID = index1 + "-" + index2, IsMine = true, Xindex = index1, Yindex = index2});
				fields.FirstOrDefault(x => x.ID == index1 + "-" + index2).IsMine = true; // set the mine in the main fields list
			}
		}
	}
	private void FindMinesInAdjacentFields()
	{
		int count = 0;
		foreach(var i in fields)
		{
			if (i.IsMine)
			{
				continue;
			}
			if (fields.Any(x => x.Xindex == i.Xindex - 1 && x.Yindex == i.Yindex - 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex && x.Yindex == i.Yindex - 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex + 1 && x.Yindex == i.Yindex - 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex + 1 && x.Yindex == i.Yindex && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex - 1 && x.Yindex == i.Yindex + 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex && x.Yindex == i.Yindex + 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex + 1 && x.Yindex == i.Yindex + 1 && x.IsMine)) { count++; }
			if (fields.Any(x => x.Xindex == i.Xindex - 1 && x.Yindex == i.Yindex && x.IsMine)) { count++; }

			i.AdjacentMines = count;
			Console.WriteLine($"Field {i.ID} has {i.AdjacentMines} adjacent mines.");
			count = 0; // reset count for next field
		}
	}
	private void ButtonClicked(string id)
	{
		var clickedField = fields.FirstOrDefault(x => x.ID == id);
		if (clickedField.State == Field.FieldState.Hidden && clickedField.AdjacentMines > 0 && !clickedField.IsMine)
		{
			//I will come back to this later(tomorrow))
		}
		else if(clickedField.State == Field.FieldState.Hidden && clickedField.IsMine)
		{
			GameLost();
		}
		else if (clickedField.State == Field.FieldState.Hidden && clickedField.AdjacentMines == 0 && !clickedField.IsMine)
		{
			fieldsToShowUp.Add(clickedField);
			RevealField(clickedField.ID);
		}
	}
	private async Task RevealField(string id)
	{
		Field clickedField = fields.FirstOrDefault(x => x.ID == id);
		Field rightField = fields.FirstOrDefault(x => x.Xindex == clickedField.Xindex + 1 && x.Yindex == clickedField.Yindex);
		if (fields.Any(x => x == rightField) != null && rightField.AdjacentMines < 1 && fieldsToShowUp.FirstOrDefault(x => x == rightField) == null && !rightField.IsMine)
		{
			fieldsToShowUp.Add(rightField);
			await RevealField(rightField.ID);
		}
		Field leftField = fields.FirstOrDefault(x => x.Xindex == clickedField.Xindex - 1 && x.Yindex == clickedField.Yindex);
		if (fields.Any(x => x == leftField) != null && leftField.AdjacentMines < 1 && fieldsToShowUp.FirstOrDefault(x => x == leftField) == null && !leftField.IsMine)
		{
			fieldsToShowUp.Add(leftField);
			await RevealField(leftField.ID);
		}
		Field upField = fields.FirstOrDefault(x => x.Xindex == clickedField.Xindex && x.Yindex == clickedField.Yindex + 1);
		if (fields.Any(x => x == upField) != null && upField.AdjacentMines < 1 && fieldsToShowUp.FirstOrDefault(x => x == upField) == null && !upField.IsMine)
		{
			fieldsToShowUp.Add(upField);
			await RevealField(upField.ID);
		}
		Field downField = fields.FirstOrDefault(x => x.Xindex == clickedField.Xindex && x.Yindex == clickedField.Yindex - 1);
		if (fields.Any(x => x == downField) != null && downField.AdjacentMines < 1 && fieldsToShowUp.FirstOrDefault(x => x == downField) == null && !downField.IsMine)
		{
			fieldsToShowUp.Add(downField);
			await RevealField(downField.ID);
		}//This if statement wasn's working so i fixed that but still don't work
		Test();
	}
	private void Test()
	{

	}
	private async Task SetAFlag(string id)
	{
		var clicked = fields.FirstOrDefault(x => x.ID == id);
		await JS.InvokeVoidAsync("setAsFlagged", clicked.ID);
		if (clicked.State == Field.FieldState.Flagged)
		{
			fields.FirstOrDefault(x => x.ID == id).State = Field.FieldState.Hidden;
		}
		else
		{
			fields.FirstOrDefault(x => x.ID == id).State = Field.FieldState.Flagged;
		}
		Console.WriteLine(fields);
	}
	private void GameLost()
	{
		JS.InvokeVoidAsync("GameLost");
		selectedDifficulty = Difficulty.NotSelected;
	}
}
